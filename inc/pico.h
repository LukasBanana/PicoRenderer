/*
 * pico.h
 * 
 * This file is part of the "PicoRenderer" (Copyright (c) 2014 by Lukas Hermanns)
 * See "LICENSE.txt" for license information.
 */

#ifndef __PR_PICO_H__
#define __PR_PICO_H__


#include "types.h"
#include "error_ids.h"
#include "platform.h"


// --- common --- //

//! Returns the last error. By default PR_ERROR_NONE.
PRenum prGetError();

//! Initializes the pico renderer.
PRboolean prInit();

//! Releases the pico renderer.
PRboolean prRelease();

// --- context --- //

/**
Generates a new render context. At least one render context is required to render anything.
\param[in] desc Specifies the OS dependent render context description.
\param[in] width Specifies the context width.
\param[in] height Specifies the context height.
\remarks The render context must be deleted with 'prDeleteContext'.
\see prDeleteContext
*/
PRobject prGenContext(const pr_context_desc* desc, PRuint width, PRuint height);

/**
Deletes the specified render context.
\param[in] context Specifies the render context which is to be deleted.
This must be generated by 'prGenContext'.
\see prGenContext
*/
void prDeleteContext(PRobject context);

//! Presents the currently bound framebuffer in the specified render context.
void prContextPresent(PRobject context);

// --- framebuffer --- //

/**
Generates a new framebuffer. At least one framebuffer is required to render anything.
\param[in] width Specifies the framebuffer width.
\param[in] height Specifies the framebuffer height.
\return Framebuffer ID.
\remarks The framebuffer must be deleted with 'prDeleteFramebuffer'.
\see prDeleteFramebuffer
*/
PRobject prGenFramebuffer(PRuint width, PRuint height);

/**
Deletes the specified framebuffer.
\param[in] framebuffer Specifies the framebuffer which is to be deleted.
This must be generated by 'prGenFramebuffer'.
\see prGenFramebuffer
*/
void prDeleteFramebuffer(PRobject framebuffer);

/**
Binds the specified framebuffer.
\param[in] framebuffer Specifies the framebuffer which is to be bound.
If this is zero, no framebuffer is bound.
*/
void prBindFramebuffer(PRobject framebuffer);

/**
Clears the specified framebuffer.
\param[in] framebuffer Specifies the framebuffer which is to be cleared.
\param[in] clearColor Specifies the color index to clear the framebuffer colors.
\param[in] depth Specifies the depth value to clear the framebuffer depths.
*/
void prClearFramebuffer(PRubyte clearColor, float depth);

//! Converts the specified RGB color into a color index.
PRubyte prGetColorIndex(PRubyte red, PRubyte green, PRubyte blue);

// --- vertexbuffer --- //

/**
Generates a new vertexbuffer with the specified number of vertices.
\param[in] numVertices Specifies the number of vertices for this vertexbuffer.
\return Vertexbuffer.
\remarks The vertexbuffer must be deleted with 'prDeleteVertexbuffer'.
\see prDeleteVertexbuffer
*/
PRobject prGenVertexbuffer(PRsizei numVertices);

/**
Deletes the specified vertexbuffer.
\param[in] vertexbuffer Specifies the vertexbuffer which is to be deleted.
This must be generated by 'prGenVertexbuffer'.
\see prGenVertexbuffer
*/
void prDeleteVertexbuffer(PRobject vertexbuffer);

// --- indexbuffer --- //

/**
Generates a new indexbuffer with the specified number of indices.
\param[in] numIndices Specifies the number of indices for this indexbuffer.
\return Indexbuffer ID.
\remarks The indexbuffer must be deleted with 'prDeleteIndexbuffer'.
\see prDeleteIndexbuffer
*/
PRobject prGenIndexbuffer(PRsizei numIndices);

/**
Deletes the specified indexbuffer.
\param[in] indexbuffer Specifies the indexbuffer which is to be deleted.
This must be generated by 'prGenIndexbuffer'.
\see prGenIndexbuffer
*/
void prDeleteIndexbuffer(PRobject indexbuffer);

// --- drawing --- //

//! Binds the current color index.
void prColor(PRubyte colorIndex);

//! Draws a single 2D point onto the screen.
void prDrawScreenPoint(PRint x, PRint y, PRubyte colorIndex);

//! Draws a single 2D line onto the screen.
void prDrawScreenLine(PRint x1, PRint y1, PRint x2, PRint y2, PRubyte colorIndex);

/**
Draws the specified amount of primitives.
\param[in] primitives Specifies the primitive types. This must be PR_PRIMITIVE_...
\param[in] numVertices Specifies the number of vertices to draw.
\param[in] firstVertex Specifies the first vertex to draw.
\remarks A vertexbuffer must be bound.
\see prBindVertexbuffer
*/
void prDraw(PRenum primitives, PRuint numVertices, PRuint firstVertex);

/**
Draws the specified amount of primitives.
\param[in] primitives Specifies the primitive types. This must be PR_PRIMITIVE_...
\param[in] numVertices Specifies the number of vertices to draw.
\param[in] firstVertex Specifies the first vertex to draw.
\remarks A vertexbuffer and an indexbuffer must be bound.
\see prBindVertexbuffer
\see prBindIndexbuffer
*/
void prDrawIndexed(PRenum primitives, PRuint numVertices, PRuint firstVertex);


#endif
